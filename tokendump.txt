[Token { token_type: IntVar, lexeme: "VARint", literal: Some(String("VARint")), line: 1, var_type: Some(Int) }, Token { token_type: Identifier, lexeme: "x", literal: Some(String("x")), line: 1, var_type: None }, Token { token_type: Equals, lexeme: "=", literal: None, line: 1, var_type: None }, Token { token_type: Number, lexeme: "10", literal: Some(Integer(10)), line: 1, var_type: None }, Token { token_type: Semicolon, lexeme: ";", literal: None, line: 1, var_type: None }, Token { token_type: IntVar, lexeme: "VARint", literal: Some(String("VARint")), line: 2, var_type: Some(Int) }, Token { token_type: Identifier, lexeme: "y", literal: Some(String("y")), line: 2, var_type: None }, Token { token_type: Equals, lexeme: "=", literal: None, line: 2, var_type: None }, Token { token_type: Number, lexeme: "4", literal: Some(Integer(4)), line: 2, var_type: None }, Token { token_type: Semicolon, lexeme: ";", literal: None, line: 2, var_type: None }, Token { token_type: IntVar, lexeme: "VARint", literal: Some(String("VARint")), line: 3, var_type: Some(Int) }, Token { token_type: Identifier, lexeme: "z", literal: Some(String("z")), line: 3, var_type: None }, Token { token_type: Semicolon, lexeme: ";", literal: None, line: 3, var_type: None }, Token { token_type: Identifier, lexeme: "z", literal: Some(String("z")), line: 4, var_type: None }, Token { token_type: Equals, lexeme: "=", literal: None, line: 4, var_type: None }, Token { token_type: Identifier, lexeme: "y", literal: Some(String("y")), line: 4, var_type: None }, Token { token_type: Plus, lexeme: "+", literal: None, line: 4, var_type: None }, Token { token_type: Identifier, lexeme: "x", literal: Some(String("x")), line: 4, var_type: None }, Token { token_type: Semicolon, lexeme: ";", literal: None, line: 4, var_type: None }, Token { token_type: StrVar, lexeme: "VARstr", literal: Some(String("VARstr")), line: 5, var_type: Some(Str) }, Token { token_type: Identifier, lexeme: "s", literal: Some(String("s")), line: 5, var_type: None }, Token { token_type: Equals, lexeme: "=", literal: None, line: 5, var_type: None }, Token { token_type: String, lexeme: "stringlit", literal: Some(String("stringlit")), line: 5, var_type: Some(Str) }, Token { token_type: Semicolon, lexeme: ";", literal: None, line: 5, var_type: None }, Token { token_type: DisplayInt, lexeme: "DISPLAYnumeric", literal: Some(String("DISPLAYnumeric")), line: 6, var_type: None }, Token { token_type: Identifier, lexeme: "z", literal: Some(String("z")), line: 6, var_type: None }, Token { token_type: Semicolon, lexeme: ";", literal: None, line: 6, var_type: None }, Token { token_type: If, lexeme: "IF", literal: Some(String("IF")), line: 7, var_type: None }, Token { token_type: LParen, lexeme: "(", literal: None, line: 7, var_type: None }, Token { token_type: Identifier, lexeme: "z", literal: Some(String("z")), line: 7, var_type: None }, Token { token_type: LessThan, lexeme: "<", literal: None, line: 7, var_type: None }, Token { token_type: Number, lexeme: "5", literal: Some(Integer(5)), line: 7, var_type: None }, Token { token_type: RParen, lexeme: ")", literal: None, line: 7, var_type: None }, Token { token_type: Then, lexeme: "THEN", literal: Some(String("THEN")), line: 7, var_type: None }, Token { token_type: DisplayStr, lexeme: "DISPLAYstring", literal: Some(String("DISPLAYstring")), line: 7, var_type: None }, Token { token_type: String, lexeme: "true!", literal: Some(String("true!")), line: 7, var_type: Some(Str) }, Token { token_type: Semicolon, lexeme: ";", literal: None, line: 7, var_type: None }, Token { token_type: Else, lexeme: "ELSE", literal: Some(String("ELSE")), line: 8, var_type: None }, Token { token_type: DisplayStr, lexeme: "DISPLAYstring", literal: Some(String("DISPLAYstring")), line: 8, var_type: None }, Token { token_type: String, lexeme: "false!", literal: Some(String("false!")), line: 8, var_type: Some(Str) }, Token { token_type: Semicolon, lexeme: ";", literal: None, line: 8, var_type: None }, Token { token_type: Endifelseblock, lexeme: "END-IF", literal: Some(String("END-IF")), line: 9, var_type: None }, Token { token_type: DisplayStr, lexeme: "DISPLAYstring", literal: Some(String("DISPLAYstring")), line: 9, var_type: None }, Token { token_type: Identifier, lexeme: "s", literal: Some(String("s")), line: 9, var_type: None }, Token { token_type: Semicolon, lexeme: ";", literal: None, line: 9, var_type: None }, Token { token_type: EOF, lexeme: "END", literal: Some(String("END")), line: 10, var_type: None }]
